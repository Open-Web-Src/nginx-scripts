name: Deploy NestJS to EC2

on:
  push:
    branches:
      - dev
      - stg
      - main

jobs:
  set-env:
    name: Set Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      deploy-env: ${{ steps.set-env.outputs.DEPLOY_ENV }}  # ✅ Pass evaluated DEPLOY_ENV
    steps:
      - name: Evaluate DEPLOY_ENV
        id: set-env
        run: echo "DEPLOY_ENV=${{ github.ref_name == 'main' && 'prod' || github.ref_name }}" >> $GITHUB_OUTPUT

  ci:
    name: Run CI Workflow
    needs: set-env  # ✅ Ensure environment is set first
    uses: ./.github/workflows/ci.yaml
    with:
      deploy-env: ${{ needs.set-env.outputs.deploy-env }}  # ✅ Pass DEPLOY_ENV to CI
    secrets: inherit

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [set-env, ci]
    env:
      DEPLOY_ENV: ${{ needs.set-env.outputs.deploy-env }}
    environment: ${{ needs.set-env.outputs.deploy-env }}
    permissions:
      id-token: write  # Allows GitHub to request an OIDC token from AWS
      contents: read    # Allows the workflow to read repository contents
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: nestjs-build-${{ env.DEPLOY_ENV }}
          path: apis/dist/

      - name: Deploy using Composite Action
        uses: ./.github/actions/deploy-to-ec2
        with:
          ec2_host: ${{ secrets.EC2_HOST }}
          ec2_user: ${{ secrets.EC2_USER }}
          ec2_ssh_key: ${{ secrets.EC2_SSH_KEY }}
          pm2_app_name: ${{ secrets.PM2_APP_NAME }}
          aws_region: "${{ secrets.AWS_REGION }}"
          secret_id: "${{ env.DEPLOY_ENV }}/v1.0.0/database"
          role_arn: ${{ secrets.ROLE_ARN }}
